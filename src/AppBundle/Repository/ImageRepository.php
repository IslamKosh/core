<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Task;
use AppBundle\Entity\Image;
use AppBundle\Google\Drive;
use Doctrine\ORM\EntityRepository;

/**
 * ImageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ImageRepository extends EntityRepository
{
    public function populateImages(Task $task)
    {
        $images = $task->getImages();
        $imageUrls = explode("\n", $task->getImageUrls());

        foreach ($imageUrls as $imageUrl) {

            foreach ($images as $image) {
                if ($image->getUrl() == $imageUrl) {
                    continue;
                }
            }

            $image = new Image();
            $image->setUrl($imageUrl);
            $image->setTask($task);
            $image->setFetched(false);

            $this->getEntityManager()->persist($image);
        }

        $this->getEntityManager()->flush();
    }

    public function fetchImageContents(Task $task, Drive $drive)
    {
        $images  = $task->getImages();
        $success = 0;

        /** @var Image $image */
        foreach ($images as $image) {
            $content = $drive->getDocumentText($image->getDownloadLink());
            if (!empty($content)) {
                $image->setContent($content);
                $image->setFetched(true);
                $this->getEntityManager()->persist($image);
                $success++;
            }
        }

        $this->getEntityManager()->flush();

        return $success;
    }

    public function updateImageContents($fields)
    {
        $fullContent = '';
        $task = null;

        foreach ($fields['image_id'] as $index => $id) {

            /** @var Image $image */
            $image = $this->find($id);

            /** @var Task $task */
            $task = $image->getTask();

            $fullContent .= $fields['image_content'][$index];
            $image->setContent($fields['image_content'][$index]);

            $this->getEntityManager()->persist($image);

        }

        $task->setContents($fullContent);
        $this->getEntityManager()->persist($task);

        $this->getEntityManager()->flush();
    }
}
